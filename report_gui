# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'report_gui.ui'
#
# Created by: PyQt5 UI code generator 5.7
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets, uic
import sys 
import os
import platform
import time
import math
import shutil
import string
import psutil
import ctypes
from time import sleep


def getCpuInfo():
    cpuid = platform.processor()
    return cpuid



def convertSize(size):
   if (size == 0):
       return '0B'
   size_name = ("Byte","KB", "MB", "GB", "TB", "PB", "EB", "ZB" )
   i = int(math.floor(math.log(size,1024)))
   p = math.pow(1024,i)
   s = round(size/p,2)
   return '%s %s' % (s,size_name[i])

def get_size(start_path = '.'):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(start_path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total_size += os.path.getsize(fp)
    return total_size

TotalMem = ""
UsedMem = ""
SwapMem = ""
UsedSwap = ""
def getMemory():
    memAll = psutil.virtual_memory()
    print (memAll)
    
    TotalMem = convertSize(int(memAll[0]))
    return TotalMem

def getSwapMemory():
    swapAll = psutil.swap_memory()
    print (swapAll)

    SwapMem = convertSize(int(swapAll[0]))
    UsedSwap = convertSize(int(swapAll[1]))


    return SwapMem

def has_admin():
    import os
    if os.name == 'nt':
        try:
            # only windows users with admin privileges can read the C:\windows\temp
            os.mkdir("c:/Program files/tempadmin")
            os.rmdir("c:/Program files/tempadmin")

        except:
            return False
        else:
            return True

getSwapMemory()




"""

def get_registry_value(key, subkey, value):
    import winreg
    key = getattr(winreg, key)
    handle = winreg.OpenKey(key, subkey)
    (value, type) = winreg.QueryValueEx(handle, value)
    return value
 
def os_version():
    def get(key):
        return get_registry_value(
            "HKEY_LOCAL_MACHINE", 
            "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion",
            key)
    os = get("ProductName")
    sp = get("CSDVersion")
    build = get("CurrentBuildNumber")
    return "%s %s (build %s)" % (os, sp, build)


def cpu():
    try:
        cputype = get_registry_value(
            "HKEY_LOCAL_MACHINE", 
            "HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0",
            "ProcessorNameString")
    except:
        import wmi, pythoncom
        pythoncom.CoInitialize() 
        c = wmi.WMI()
        for i in c.Win32_Processor ():
            cputype = i.Name
        pythoncom.CoUninitialize()
 
    if cputype == 'AMD Athlon(tm)':
        c = wmi.WMI()
        for i in c.Win32_Processor ():
            cpuspeed = i.MaxClockSpeed
        cputype = 'AMD Athlon(tm) %.2f Ghz' % (cpuspeed / 1000.0)
    elif cputype == 'AMD Athlon(tm) Processor':
        import wmi
        c = wmi.WMI()
        for i in c.Win32_Processor ():
            cpuspeed = i.MaxClockSpeed
        cputype = 'AMD Athlon(tm) %s' % cpuspeed
    else:
        pass
    return cputype

print (os_version())

print (cpu())


# debug line : os version is not confirmed by win32

"""







now = time.localtime()
t = "%04d-%02d-%02d %02d:%02d:%02d" % (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)
reportPath = "c:/users/"+os.getlogin()+"/desktop/"
folderName = "ICIDO_Error_"+str(now.tm_mon)+str(now.tm_mday)+str(now.tm_hour)+str(now.tm_min)
print (os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log"))
print (os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp"))
if os.path.exists("C:/Users/"+os.getlogin()+"/Appdata/Local/ICIDO")==False:
    os.mkdir("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO")
if os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/") == False:
    os.mkdir("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/")
if os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp") == False:
    os.mkdir("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp")

if os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp")==False:
    os.mkdir("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp")



if os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log")== False :
    tempFile =  open("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log", "w")
    tempFile.write("IC.IDO log not exist. This file is made intentionally")
    tempFile.close()

sysLog = open("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log", "r")
sysLogPath = "C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log"
erLogPath = "C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/error.log"
#Report = open("c:/users/"+os.getlogin()+"/desktop/"+str(now.tm_year)+str(now.tm_mon)+str(now.tm_mday)+str(now.tm_hour)+str(now.tm_min)+".txt","w")

ipName = ""
idoSize = 0
fPath = ""
logData = ""
idoPath =""
importPath = ""
cadFiles = []

cadPaths = []

opFiles = []

opPaths = []

seFiles = []

sePaths = []

startTime = ""

#cpu info get

crState = 0
apState = 0

osInfo = platform.system()
windowsInfo = platform.win32_ver()
gcName = ""
gcVersion = ""



try:
    is_admin = os.getuid() == 0
except AttributeError:
    is_admin = ctypes.windll.shell32.IsUserAnAdmin()






for a in sysLog:   
    if "Log: (Level 10) [IDOLicenseManager: checking out license..]" in a and "[Timestamp" in a:
        tempLine = a.split("    ")
        #print (tempLine)

        sTime = tempLine[0]
        print (sTime)
        sTime = sTime.replace('[',"")
        sTime = sTime.replace(']',"")
        sTime = sTime.split(':')
        sTime = sTime[1]
        print (sTime)
        sTime = sTime.lstrip()
        sTime = sTime.rstrip()
        sTime = int(sTime)
        print (sTime)    
        #startTime = time.gmtime(float(str(sTime)[:-6]+'.'+str(sTime)[-6:])) 

        startTime = time.ctime(float(str(sTime)[:-3]+'.'+str(sTime)[-3:]))
        foName = time.localtime(float(str(sTime)[:-3]+'.'+str(sTime)[-3:]))
        print (foName)
        print (startTime)

    if "Log: (Level 05) [        Creating state" in a:
        crState = crState+1

    if "Log: (Level 05) [        Activating state" in a and not 'Session-State' in a:
        apState = apState+1







    if "Log: (Level 05) [    Reading session from" in a:
        b = a.split("'")
        #print (b[1])
        idoPath = b[1]
        c = idoPath.rsplit('/',1)
        #print (c)
        fPath = c[0]

        seFiles.append(idoPath)
        sePaths.append(fPath)
        print (seFiles)


    elif "Log: (Level 05) [OpenGL renderer string  :" in a:
        d = a.rsplit(':')
        gcName = d[-1]

    elif "Log: (Level 05) [OpenGL version string   :" in a:
        e = a.rsplit(':')
        gcVersion = e[-1]

    elif "Log: (Level 05) [Loaded " in a:
        cadFile = a.replace('\\','/')
        print (cadFile)
        cadPath = cadFile.split("'")
        print (cadPath)
        cadFile = cadPath[-2]
        print (cadFile)
        cadFiles.append(cadFile)
     
        cadPath = cadFile.rsplit('/',1)
        cadPath = cadPath[-2] 

        cadPath = cadPath.lstrip()
        print (cadPath)
        cadPaths.append(cadPath)

       

    elif "Log: (Level 07) [IDOExploreApp::openFile()" in a:
        
        opFile = a.replace('\\','/')
        print (opFile)
        #opFile = opFile.translate(')')
        fff = opFile.split(")")
        print (fff)
     
        ff = fff[2]
        print (ff)
    

        g = ff.split("]")
        ipName = g[0]
        ipNameSplit = ipName.rsplit('/',1)
        importPath = ipNameSplit[0]
        ipName = ipName.lstrip()
        importPath = importPath.lstrip()

        opFiles.append(ipName)
        opPaths.append(importPath)


        #print (importPath)
        #print (ipName)




#mfTime ="last used: %s" % time.ctime(os.path.getmtime("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log")) 
mTime = os.path.getmtime("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log")



mTime = time.ctime(mTime)
print (mTime)


mfTime ="[IC.IDO Closed]  : %s" % time.ctime(os.path.getmtime("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log"))+"\n"



#print (mfTime)
#print ("created: %s" % time.ctime(os.path.getctime("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/sysLog.log")))
if os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/error.log")==False:
    tempFile =  open("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/error.log", "w")
    tempFile.close()

error_log = open("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/Temp/error.log", "r")

checkSympthoms = []


userName = str(os.getlogin())
machineName = str(platform.node())




sysLog.close()
error_log.close()

#Report.write(mfTime+"\n")



"""
Report.write(str(platform.system()))
Report.write(str(platform.processor()))
Report.write(str(platform.win32_ver(release='', version='', csd='', ptype='')))
"""
#Report.write(logData)



#Report.close()

"""close_written file"""




#!/usr/bin/python
"""
import smtplib

sender = 'from@fromdomain.com'
receivers = ['to@todomain.com']

"""
#message = """
#From: From Person <from@fromdomain.com>
#To: To Person <to@todomain.com>
#Subject: SMTP e-mail test

#This is a test e-mail message.



"""
try:
   smtpObj = smtplib.SMTP('localhost')
   smtpObj.sendmail(sender, receivers, message)         
   print "Successfully sent email"
except SMTPException:
   print "Error: unable to send email"
"""




class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setEnabled(True)
        Dialog.resize(905, 509)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(7)
        sizePolicy.setVerticalStretch(7)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setSizeIncrement(QtCore.QSize(10, 8))
        Dialog.setBaseSize(QtCore.QSize(1, 5))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        Dialog.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Downloads/logo_icido.JPG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setAutoFillBackground(False)
        Dialog.setSizeGripEnabled(False)
        Dialog.setModal(False)
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(30, 270, 851, 61))
        self.groupBox_2.setSizeIncrement(QtCore.QSize(3, 3))
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.workFlow1 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow1.setEditable(True)
        self.workFlow1.setObjectName("workFlow1")
        self.workFlow1.addItem("")
        self.workFlow1.addItem("")
        self.workFlow1.addItem("")
        self.workFlow1.addItem("")
        self.gridLayout_7.addWidget(self.workFlow1, 0, 0, 1, 1)
        self.workFlow2 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow2.setEditable(True)
        self.workFlow2.setCurrentText("--")
        self.workFlow2.setObjectName("workFlow2")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.gridLayout_7.addWidget(self.workFlow2, 0, 1, 1, 1)
        self.workFlow3 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow3.setEditable(True)
        self.workFlow3.setCurrentText("--")
        self.workFlow3.setObjectName("workFlow3")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.gridLayout_7.addWidget(self.workFlow3, 0, 2, 1, 1)
        self.workFlow4 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow4.setEditable(True)
        self.workFlow4.setCurrentText("--")
        self.workFlow4.setObjectName("workFlow4")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.gridLayout_7.addWidget(self.workFlow4, 0, 3, 1, 1)
        self.workFlow5 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow5.setEditable(True)
        self.workFlow5.setCurrentText("--")
        self.workFlow5.setObjectName("workFlow5")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.gridLayout_7.addWidget(self.workFlow5, 0, 4, 1, 1)
        self.groupBox_5 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_5.setGeometry(QtCore.QRect(30, 180, 851, 71))
        self.groupBox_5.setObjectName("groupBox_5")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox_5)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.checkBox_6_etc = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_6_etc.setObjectName("checkBox_6_etc")
        self.gridLayout_6.addWidget(self.checkBox_6_etc, 0, 5, 1, 1)
        self.checkBox_1_shutdown = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_1_shutdown.setObjectName("checkBox_1_shutdown")
        self.gridLayout_6.addWidget(self.checkBox_1_shutdown, 0, 0, 1, 1)
        self.checkBox_2_freeze = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_2_freeze.setObjectName("checkBox_2_freeze")
        self.gridLayout_6.addWidget(self.checkBox_2_freeze, 0, 1, 1, 1)
        self.checkBox_4_loading = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_4_loading.setObjectName("checkBox_4_loading")
        self.gridLayout_6.addWidget(self.checkBox_4_loading, 0, 3, 1, 1)
        self.checkBox_5_import = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_5_import.setObjectName("checkBox_5_import")
        self.gridLayout_6.addWidget(self.checkBox_5_import, 0, 4, 1, 1)
        self.comboBox_critical_2 = QtWidgets.QComboBox(self.groupBox_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_critical_2.sizePolicy().hasHeightForWidth())
        self.comboBox_critical_2.setSizePolicy(sizePolicy)
        self.comboBox_critical_2.setEditable(True)
        self.comboBox_critical_2.setObjectName("comboBox_critical_2")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.gridLayout_6.addWidget(self.comboBox_critical_2, 0, 6, 1, 1)
        self.checkBox_3_controller = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_3_controller.setObjectName("checkBox_3_controller")
        self.gridLayout_6.addWidget(self.checkBox_3_controller, 0, 2, 1, 1)
        self.reportBtn = QtWidgets.QPushButton(Dialog)
        self.reportBtn.setGeometry(QtCore.QRect(480, 450, 75, 23))
        self.reportBtn.setObjectName("reportBtn")
        self.exitBtn = QtWidgets.QPushButton(Dialog)
        self.exitBtn.setGeometry(QtCore.QRect(648, 355, 75, 23))
        self.exitBtn.setObjectName("exitBtn")
        #self.cancelBtn = QtWidgets.QPushButton(Dialog)
        #self.cancelBtn.setGeometry(QtCore.QRect(620, 450, 75, 23))
        #self.cancelBtn.setObjectName("cancelBtn")
        self.cautionLabel = QtWidgets.QLabel(Dialog)
        self.cautionLabel.setGeometry(QtCore.QRect(570, 320, 131, 16))
        self.cautionLabel.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.cautionLabel.setText("")
        self.cautionLabel.setObjectName("cautionLabel")
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(480, 420, 231, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.groupBox_7 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_7.setGeometry(QtCore.QRect(610, 10, 121, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_7.sizePolicy().hasHeightForWidth())
        self.groupBox_7.setSizePolicy(sizePolicy)
        self.groupBox_7.setObjectName("groupBox_7")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_7)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.comboBox_critical = QtWidgets.QComboBox(self.groupBox_7)
        self.comboBox_critical.setObjectName("comboBox_critical")
        self.comboBox_critical.addItem("")
        self.comboBox_critical.addItem("")
        self.comboBox_critical.addItem("")
        self.comboBox_critical.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_critical, 0, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(480, 360, 351, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(480, 395, 351, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.groupBox_3 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_3.setGeometry(QtCore.QRect(300, 10, 301, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_3.sizePolicy().hasHeightForWidth())
        self.groupBox_3.setSizePolicy(sizePolicy)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.comboBox_version = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox_version.setObjectName("comboBox_version")
        self.comboBox_version.addItem("")
        self.comboBox_version.addItem("")
        self.comboBox_version.addItem("")        
        self.comboBox_version.addItem("")
        self.gridLayout_2.addWidget(self.comboBox_version, 0, 0, 1, 1)
        self.checkBox_beta = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox_beta.setObjectName("checkBox_beta")
        self.gridLayout_2.addWidget(self.checkBox_beta, 0, 1, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setEnabled(True)
        self.groupBox.setGeometry(QtCore.QRect(30, 10, 261, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.radioButton_desktop = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_desktop.setObjectName("radioButton_desktop")
        self.gridLayout.addWidget(self.radioButton_desktop, 0, 0, 1, 1)
        self.radioButton_immersive = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_immersive.setObjectName("radioButton_immersive")
        self.gridLayout.addWidget(self.radioButton_immersive, 0, 1, 1, 1)
        self.groupBox_6 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_6.setGeometry(QtCore.QRect(30, 80, 221, 91))
        self.groupBox_6.setObjectName("groupBox_6")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_6)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.spinBox_time = QtWidgets.QSpinBox(self.groupBox_6)
        self.spinBox_time.setObjectName("spinBox_time")
        self.gridLayout_4.addWidget(self.spinBox_time, 0, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.groupBox_6)
        self.label.setObjectName("label")
        self.gridLayout_4.addWidget(self.label, 0, 1, 1, 1)
        self.groupBox_4 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_4.setGeometry(QtCore.QRect(270, 80, 611, 91))
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_4)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.radioBox_timing_1 = QtWidgets.QRadioButton(self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioBox_timing_1.sizePolicy().hasHeightForWidth())
        self.radioBox_timing_1.setSizePolicy(sizePolicy)
        self.radioBox_timing_1.setObjectName("radioBox_timing_1")
        self.gridLayout_5.addWidget(self.radioBox_timing_1, 0, 0, 1, 1)
        self.radioBox_timing_3 = QtWidgets.QRadioButton(self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioBox_timing_3.sizePolicy().hasHeightForWidth())
        self.radioBox_timing_3.setSizePolicy(sizePolicy)
        self.radioBox_timing_3.setObjectName("radioBox_timing_3")
        self.gridLayout_5.addWidget(self.radioBox_timing_3, 0, 1, 1, 1)
        self.radioBox_timing_4 = QtWidgets.QRadioButton(self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioBox_timing_4.sizePolicy().hasHeightForWidth())
        self.radioBox_timing_4.setSizePolicy(sizePolicy)
        self.radioBox_timing_4.setObjectName("radioBox_timing_4")
        self.gridLayout_5.addWidget(self.radioBox_timing_4, 1, 0, 1, 1)
        self.radioBox_timing_5_etc = QtWidgets.QRadioButton(self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioBox_timing_5_etc.sizePolicy().hasHeightForWidth())
        self.radioBox_timing_5_etc.setSizePolicy(sizePolicy)
        self.radioBox_timing_5_etc.setObjectName("radioBox_timing_5_etc")
        self.gridLayout_5.addWidget(self.radioBox_timing_5_etc, 1, 1, 1, 1)
        self.lineEdit_radioBox_timing_etc = QtWidgets.QLineEdit(self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_radioBox_timing_etc.sizePolicy().hasHeightForWidth())
        self.lineEdit_radioBox_timing_etc.setSizePolicy(sizePolicy)
        self.lineEdit_radioBox_timing_etc.setObjectName("lineEdit_radioBox_timing_etc")
        self.gridLayout_5.addWidget(self.lineEdit_radioBox_timing_etc, 1, 2, 1, 1)
        self.textEdit_error_detail = QtWidgets.QTextEdit(Dialog)
        self.textEdit_error_detail.setGeometry(QtCore.QRect(30, 370, 421, 103))
        self.textEdit_error_detail.setObjectName("textEdit_error_detail")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(30, 350, 231, 16))
        self.label_2.setObjectName("label_2")
        self.groupBox_3.raise_()
        self.groupBox.raise_()
        self.groupBox_6.raise_()
        self.groupBox_4.raise_()
        self.textEdit_error_detail.raise_()
        self.label_2.raise_()
        self.groupBox_2.raise_()
        self.groupBox_5.raise_()
        self.reportBtn.raise_()
        #self.cancelBtn.raise_()
        self.cautionLabel.raise_()
        self.progressBar.raise_()
        self.groupBox_7.raise_()
        self.label_3.raise_()
        self.exitBtn.raise_()

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        """
        Dialog.setObjectName("Dialog")
        Dialog.resize(900, 656)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        Dialog.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Downloads/logo_icido.JPG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setAutoFillBackground(False)
        Dialog.setSizeGripEnabled(False)
        Dialog.setModal(False)
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(30, 240, 691, 53))
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.workFlow1 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow1.setEditable(True)
        self.workFlow1.setObjectName("workFlow1")
        self.workFlow1.addItem("")
        self.workFlow1.addItem("")
        self.workFlow1.addItem("")
        self.workFlow1.addItem("")
        self.gridLayout_7.addWidget(self.workFlow1, 0, 0, 1, 1)
        self.workFlow2 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow2.setEditable(True)
        self.workFlow2.setCurrentText("--")
        self.workFlow2.setObjectName("workFlow2")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.workFlow2.addItem("")
        self.gridLayout_7.addWidget(self.workFlow2, 0, 1, 1, 1)
        self.workFlow3 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow3.setEditable(True)
        self.workFlow3.setCurrentText("--")
        self.workFlow3.setObjectName("workFlow3")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.workFlow3.addItem("")
        self.gridLayout_7.addWidget(self.workFlow3, 0, 2, 1, 1)
        self.workFlow4 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow4.setEditable(True)
        self.workFlow4.setCurrentText("--")
        self.workFlow4.setObjectName("workFlow4")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.workFlow4.addItem("")
        self.gridLayout_7.addWidget(self.workFlow4, 0, 3, 1, 1)
        self.workFlow5 = QtWidgets.QComboBox(self.groupBox_2)
        self.workFlow5.setEditable(True)
        self.workFlow5.setCurrentText("--")
        self.workFlow5.setObjectName("workFlow5")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.workFlow5.addItem("")
        self.gridLayout_7.addWidget(self.workFlow5, 0, 4, 1, 1)
        self.groupBox_5 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_5.setGeometry(QtCore.QRect(30, 170, 691, 53))
        self.groupBox_5.setObjectName("groupBox_5")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox_5)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.checkBox_1_shutdown = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_1_shutdown.setObjectName("checkBox_1_shutdown")
        self.gridLayout_6.addWidget(self.checkBox_1_shutdown, 0, 0, 1, 1)
        self.checkBox_2_freeze = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_2_freeze.setObjectName("checkBox_2_freeze")
        self.gridLayout_6.addWidget(self.checkBox_2_freeze, 0, 1, 1, 1)
        self.checkBox_3_controller = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_3_controller.setObjectName("checkBox_3_controller")
        self.gridLayout_6.addWidget(self.checkBox_3_controller, 0, 2, 1, 1)
        self.checkBox_4_loading = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_4_loading.setObjectName("checkBox_4_loading")
        self.gridLayout_6.addWidget(self.checkBox_4_loading, 0, 3, 1, 1)
        self.checkBox_5_import = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_5_import.setObjectName("checkBox_5_import")
        self.gridLayout_6.addWidget(self.checkBox_5_import, 0, 4, 1, 1)
        self.checkBox_6_etc = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_6_etc.setObjectName("checkBox_6_etc")
        self.gridLayout_6.addWidget(self.checkBox_6_etc, 0, 5, 1, 1)
        self.comboBox_critical_2 = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox_critical_2.setEditable(True)
        self.comboBox_critical_2.setObjectName("comboBox_critical_2")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.comboBox_critical_2.addItem("")
        self.gridLayout_6.addWidget(self.comboBox_critical_2, 0, 6, 1, 1)
        self.reportBtn = QtWidgets.QPushButton(Dialog)
        self.reportBtn.setGeometry(QtCore.QRect(500, 400, 75, 23))
        self.reportBtn.setObjectName("reportBtn")
        self.exitBtn = QtWidgets.QPushButton(Dialog)
        self.exitBtn.setGeometry(QtCore.QRect(630, 315, 75, 23))
        self.exitBtn.setObjectName("exitBtn")
        self.cancelBtn = QtWidgets.QPushButton(Dialog)
        self.cancelBtn.setGeometry(QtCore.QRect(620, 400, 75, 23))
        self.cancelBtn.setObjectName("cancelBtn")
        self.cautionLabel = QtWidgets.QLabel(Dialog)
        self.cautionLabel.setGeometry(QtCore.QRect(570, 320, 131, 16))
        self.cautionLabel.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.cautionLabel.setText("")
        self.cautionLabel.setObjectName("cautionLabel")
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(500, 360, 181, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.groupBox_7 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_7.setGeometry(QtCore.QRect(610, 10, 111, 53))
        self.groupBox_7.setObjectName("groupBox_7")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_7)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.comboBox_critical = QtWidgets.QComboBox(self.groupBox_7)
        self.comboBox_critical.setObjectName("comboBox_critical")
        self.comboBox_critical.addItem("")
        self.comboBox_critical.addItem("")
        self.comboBox_critical.addItem("")
        self.comboBox_critical.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_critical, 0, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(470, 320, 291, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(470, 340, 291, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.groupBox_3 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_3.setGeometry(QtCore.QRect(300, 10, 301, 53))
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.comboBox_version = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox_version.setObjectName("comboBox_version")
        self.comboBox_version.addItem("")
        self.comboBox_version.addItem("")
        self.comboBox_version.addItem("")
        self.comboBox_version.addItem("")
        self.gridLayout_2.addWidget(self.comboBox_version, 0, 0, 1, 1)
        self.checkBox_beta = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox_beta.setObjectName("checkBox_beta")
        self.gridLayout_2.addWidget(self.checkBox_beta, 0, 1, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(30, 10, 261, 50))
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.radioButton_desktop = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_desktop.setObjectName("radioButton_desktop")
        self.gridLayout.addWidget(self.radioButton_desktop, 0, 0, 1, 1)
        self.radioButton_immersive = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_immersive.setObjectName("radioButton_immersive")
        self.gridLayout.addWidget(self.radioButton_immersive, 0, 1, 1, 1)
        self.groupBox_6 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_6.setGeometry(QtCore.QRect(30, 80, 221, 71))
        self.groupBox_6.setObjectName("groupBox_6")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_6)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.spinBox_time = QtWidgets.QSpinBox(self.groupBox_6)
        self.spinBox_time.setObjectName("spinBox_time")
        self.gridLayout_4.addWidget(self.spinBox_time, 0, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.groupBox_6)
        self.label.setObjectName("label")
        self.gridLayout_4.addWidget(self.label, 0, 1, 1, 1)
        self.groupBox_4 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_4.setGeometry(QtCore.QRect(270, 80, 451, 71))
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_4)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.radioBox_timing_1 = QtWidgets.QRadioButton(self.groupBox_4)
        self.radioBox_timing_1.setObjectName("radioBox_timing_1")
        self.gridLayout_5.addWidget(self.radioBox_timing_1, 0, 0, 1, 1)
        self.radioBox_timing_3 = QtWidgets.QRadioButton(self.groupBox_4)
        self.radioBox_timing_3.setObjectName("radioBox_timing_3")
        self.gridLayout_5.addWidget(self.radioBox_timing_3, 0, 1, 1, 1)
        self.radioBox_timing_4 = QtWidgets.QRadioButton(self.groupBox_4)
        self.radioBox_timing_4.setObjectName("radioBox_timing_4")
        self.gridLayout_5.addWidget(self.radioBox_timing_4, 1, 0, 1, 1)
        self.radioBox_timing_5_etc = QtWidgets.QRadioButton(self.groupBox_4)
        self.radioBox_timing_5_etc.setObjectName("radioBox_timing_5_etc")
        self.gridLayout_5.addWidget(self.radioBox_timing_5_etc, 1, 1, 1, 1)
        self.lineEdit_radioBox_timing_etc = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit_radioBox_timing_etc.setObjectName("lineEdit_radioBox_timing_etc")
        self.gridLayout_5.addWidget(self.lineEdit_radioBox_timing_etc, 1, 2, 1, 1)
        self.textEdit_error_detail = QtWidgets.QTextEdit(Dialog)
        self.textEdit_error_detail.setGeometry(QtCore.QRect(30, 328, 421, 103))
        self.textEdit_error_detail.setObjectName("textEdit_error_detail")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(30, 310, 156, 16))
        self.label_2.setObjectName("label_2")
        self.groupBox_2.raise_()
        self.groupBox_5.raise_()
        self.reportBtn.raise_()
        self.cancelBtn.raise_()
        self.cautionLabel.raise_()
        self.progressBar.raise_()
        self.groupBox_7.raise_()
        self.label_3.raise_()
        self.label_4.raise_()


        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        """

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Error Report"))
        self.groupBox_2.setToolTip(_translate("Dialog", "覚えている程度で、作業手順を入れてください"))
        self.groupBox_2.setTitle(_translate("Dialog", "行われた作業を左から右の順に選択してください（選択、入力可能）"))
        self.workFlow1.setItemText(0, _translate("Dialog", "--"))
        self.workFlow1.setItemText(1, _translate("Dialog", "Load Session.."))
        self.workFlow1.setItemText(2, _translate("Dialog", "Import other cadfile"))
        self.workFlow1.setItemText(3, _translate("Dialog", "Load icb"))
        self.workFlow2.setItemText(0, _translate("Dialog", "--"))
        self.workFlow2.setItemText(1, _translate("Dialog", "Simulation"))
        self.workFlow2.setItemText(2, _translate("Dialog", "make Elastic obj"))
        self.workFlow2.setItemText(3, _translate("Dialog", "make Rigid obj"))
        self.workFlow2.setItemText(4, _translate("Dialog", "Combine"))
        self.workFlow2.setItemText(5, _translate("Dialog", "Split"))
        self.workFlow2.setItemText(6, _translate("Dialog", "Record animation"))
        self.workFlow2.setItemText(7, _translate("Dialog", "Make environment"))
        self.workFlow2.setItemText(8, _translate("Dialog", "Import file as children"))
        self.workFlow3.setItemText(0, _translate("Dialog", "--"))
        self.workFlow3.setItemText(1, _translate("Dialog", "Simulation"))
        self.workFlow3.setItemText(2, _translate("Dialog", "make Elastic obj"))
        self.workFlow3.setItemText(3, _translate("Dialog", "make Rigid obj"))
        self.workFlow3.setItemText(4, _translate("Dialog", "Combine"))
        self.workFlow3.setItemText(5, _translate("Dialog", "Split"))
        self.workFlow3.setItemText(6, _translate("Dialog", "Record animation"))
        self.workFlow3.setItemText(7, _translate("Dialog", "Make environment"))
        self.workFlow3.setItemText(8, _translate("Dialog", "Import file as children"))
        self.workFlow4.setItemText(0, _translate("Dialog", "--"))
        self.workFlow4.setItemText(1, _translate("Dialog", "Simulation"))
        self.workFlow4.setItemText(2, _translate("Dialog", "make Elastic obj"))
        self.workFlow4.setItemText(3, _translate("Dialog", "make Rigid obj"))
        self.workFlow4.setItemText(4, _translate("Dialog", "Combine"))
        self.workFlow4.setItemText(5, _translate("Dialog", "Split"))
        self.workFlow4.setItemText(6, _translate("Dialog", "Record animation"))
        self.workFlow4.setItemText(7, _translate("Dialog", "Make environment"))
        self.workFlow4.setItemText(8, _translate("Dialog", "Import file as children"))
        self.workFlow5.setItemText(0, _translate("Dialog", "--"))
        self.workFlow5.setItemText(1, _translate("Dialog", "Simulation"))
        self.workFlow5.setItemText(2, _translate("Dialog", "make Elastic obj"))
        self.workFlow5.setItemText(3, _translate("Dialog", "make Rigid obj"))
        self.workFlow5.setItemText(4, _translate("Dialog", "Combine"))
        self.workFlow5.setItemText(5, _translate("Dialog", "Split"))
        self.workFlow5.setItemText(6, _translate("Dialog", "Record animation"))
        self.workFlow5.setItemText(7, _translate("Dialog", "Make environment"))
        self.workFlow5.setItemText(8, _translate("Dialog", "Import file as children"))
        
        self.groupBox_5.setTitle(_translate("Dialog", "不具合種類を選択してください（必須, 複数可能）"))
        self.checkBox_1_shutdown.setText(_translate("Dialog", "強制終了"))
        self.checkBox_2_freeze.setText(_translate("Dialog", "フリーズ"))
        self.checkBox_3_controller.setText(_translate("Dialog", "パフォーマンス"))
        self.checkBox_4_loading.setText(_translate("Dialog", "誤作動"))
        self.checkBox_5_import.setText(_translate("Dialog", "ハードウェア"))
        self.checkBox_6_etc.setText(_translate("Dialog", "その他（選択、入力可能）"))
        self.comboBox_critical_2.setItemText(0, _translate("Dialog", "--"))
        self.comboBox_critical_2.setItemText(1, _translate("Dialog", "2D GUI"))
        self.comboBox_critical_2.setItemText(2, _translate("Dialog", "IDO.Connect (Import)"))
        self.comboBox_critical_2.setItemText(3, _translate("Dialog", "IDO.Connect (Export)"))
        self.comboBox_critical_2.setItemText(4, _translate("Dialog", "IDO.Ergonomics (Ergonomics)"))        
        self.comboBox_critical_2.setItemText(5, _translate("Dialog", "IDO.Explore (Appearance)"))
        self.comboBox_critical_2.setItemText(6, _translate("Dialog", "IDO.Explore (Apperance Editor)"))
        self.comboBox_critical_2.setItemText(7, _translate("Dialog", "IDO.Explore (Cut Plane)"))
        self.comboBox_critical_2.setItemText(8, _translate("Dialog", "IDO.Explore (Environment)"))
        self.comboBox_critical_2.setItemText(9, _translate("Dialog", "IDO.Explore (General)"))
        self.comboBox_critical_2.setItemText(10, _translate("Dialog", "IDO.Explore (Groups)"))
        self.comboBox_critical_2.setItemText(11, _translate("Dialog", "IDO.Explore (Marker)"))
        self.comboBox_critical_2.setItemText(12, _translate("Dialog", "IDO.Explore (Material)"))
        self.comboBox_critical_2.setItemText(13, _translate("Dialog", "IDO.Explore (Marker)"))
        self.comboBox_critical_2.setItemText(14, _translate("Dialog", "IDO.Explore (Measure)"))
        self.comboBox_critical_2.setItemText(15, _translate("Dialog", "IDO.Explore (Property)"))
        self.comboBox_critical_2.setItemText(16, _translate("Dialog", "IDO.Explore (Session, State)"))
        self.comboBox_critical_2.setItemText(17, _translate("Dialog", "IDO.Explore(User Data)"))
        self.comboBox_critical_2.setItemText(18, _translate("Dialog", "IDO.ImmersiveWorkspace(Controller)"))
        self.comboBox_critical_2.setItemText(19, _translate("Dialog", "IDO.ImmersiveWorkspace(RingMenu)"))
        self.comboBox_critical_2.setItemText(20, _translate("Dialog", "IDO.Present (Animation)"))
        self.comboBox_critical_2.setItemText(21, _translate("Dialog", "IDO.Script"))
        self.comboBox_critical_2.setItemText(22, _translate("Dialog", "IDO.Solidmechanic (Elastic)"))
        self.comboBox_critical_2.setItemText(23, _translate("Dialog", "IDO.Solidmechanic (Flexblization)"))
        self.comboBox_critical_2.setItemText(24, _translate("Dialog", "IDO.Solidmechanic (Rigid)"))
        self.comboBox_critical_2.setItemText(25, _translate("Dialog", "IDO.Solidmechanic (Simulation)"))
        self.reportBtn.setText(_translate("Dialog", "Report"))
        self.exitBtn.setText(_translate("Dialog", "Finish"))
        #self.cancelBtn.setText(_translate("Dialog", "Cancel"))
        self.groupBox_7.setTitle(_translate("Dialog", "緊急度 （必須）"))
        self.comboBox_critical.setItemText(0, _translate("Dialog", "--"))
        self.comboBox_critical.setItemText(1, _translate("Dialog", "High"))
        self.comboBox_critical.setItemText(2, _translate("Dialog", "Midium"))
        self.comboBox_critical.setItemText(3, _translate("Dialog", "Low"))
        self.label_3.setText(_translate("Dialog", "各フォームに内容を入力し、Reportを押してください"))
        self.label_4.setText(_translate("Dialog", ""))
        self.groupBox_3.setTitle(_translate("Dialog", "IC.IDOのバージョン （必須）"))
        self.comboBox_version.setItemText(0, _translate("Dialog", ""))
        self.comboBox_version.setItemText(1, _translate("Dialog", "11.0"))
        self.comboBox_version.setItemText(2, _translate("Dialog", "10.2"))
        self.comboBox_version.setItemText(3, _translate("Dialog", "9.2"))

        self.checkBox_beta.setText(_translate("Dialog", "Beta version"))
        self.groupBox.setToolTip(_translate("Dialog", "<html><head/><body><p>Immersive +　Desktopの場合はDesktopを選択してください</p></body></html>"))
        self.groupBox.setTitle(_translate("Dialog", "作業環境 （必須）"))
        self.radioButton_desktop.setText(_translate("Dialog", "Desktop"))
        self.radioButton_immersive.setText(_translate("Dialog", "Immersive"))
        self.groupBox_6.setTitle(_translate("Dialog", "不具合発生までの作業時間"))
        self.label.setText(_translate("Dialog", "(分)"))
        self.groupBox_4.setTitle(_translate("Dialog", "不具合が発生したタイミングを選んでください （必須、複数可能）"))
        self.radioBox_timing_1.setText(_translate("Dialog", "ソフトの起動時"))
        self.radioBox_timing_3.setText(_translate("Dialog", "データ作成中"))
        self.radioBox_timing_4.setText(_translate("Dialog", "シミュレーション中"))
        self.radioBox_timing_5_etc.setText(_translate("Dialog", "その他（直接入力）"))
        self.label_2.setText(_translate("Dialog", "不具合内容の詳細をご記入ください"))
        self.exitBtn.hide()
        #self.lineEdit_radioBox_timing_etc.setDisabled(1)
        #self.comboBox_critical_2.setDisabled(1)
       



class MainDialog(Ui_Dialog):

    def __init__(self, dialog):
        Ui_Dialog.__init__(self)
        self.setupUi(dialog)

        #self.button
        self.reportBtn.clicked.connect(self.checkForm)
        #self.cancelBtn.clicked.connect(self.clear)
        self.exitBtn.clicked.connect(self.clear)
        self.radioBox_timing_5_etc.toggled.connect(self.lineEdit_radioBox_timing_etc.show)
        self.radioBox_timing_5_etc.toggled.connect(self.lineEdit_radioBox_timing_etc.setEnabled)
        self.radioBox_timing_5_etc.toggled.connect(self.lineEdit_radioBox_timing_etc.setEnabled)
        self.checkBox_6_etc.toggled.connect(self.comboBox_critical_2.setEnabled)
   
       


        










        #self.workFlow1.changeEvent(self.workFlow2.show())


    

    def clear(self):
        sys.exit(app.exec_())




    def checkForm(self):
        if self.radioButton_immersive.isChecked() == False and self.radioButton_desktop.isChecked() == False:
            print ('need')
            self.groupBox.setStyleSheet("color: red")
            self.label_3.setText("作業環境を選択しいてください")
            self.label_3.setStyleSheet('color: red')

      
        elif self.comboBox_version.currentText() == "":
            self.groupBox.setStyleSheet("color: black")
            self.groupBox_3.setStyleSheet("color: red")
            print ('need3')
            self.label_3.setText("IC.IDOのバージョンを選択しいてください")
            self.label_3.setStyleSheet('color: red')

        elif self.comboBox_critical.currentText() == "--":
            self.groupBox.setStyleSheet("color: black")
            self.groupBox_3.setStyleSheet("color: black")
            self.groupBox_7.setStyleSheet("color: red")
            print ('critical')
            self.label_3.setText("緊急度を選択してください")
            self.label_3.setStyleSheet('color : red')


        elif self.radioBox_timing_1.isChecked() == False and self.radioBox_timing_3.isChecked() == False and self.radioBox_timing_4.isChecked() == False and (self.radioBox_timing_5_etc.isChecked() == False or self.lineEdit_radioBox_timing_etc.text() == ""):
            self.groupBox.setStyleSheet("color: black")
            self.groupBox_3.setStyleSheet("color: black")
            self.groupBox_7.setStyleSheet("color: black")
            self.groupBox_4.setStyleSheet("color: red")
            print ('need4')
            self.label_3.setText("発生タイミングを選択してください")
            self.label_3.setStyleSheet('color: red')

            
        elif self.checkBox_1_shutdown.isChecked()  == False and self.checkBox_2_freeze.isChecked()  == False and self.checkBox_3_controller.isChecked() ==False and self.checkBox_4_loading.isChecked() ==False and self.checkBox_5_import.isChecked() ==False and (self.checkBox_6_etc.isChecked() ==False or self.comboBox_critical_2.currentText()=="--"):
            self.groupBox.setStyleSheet("color: black")
            self.groupBox_3.setStyleSheet("color: black")
            self.groupBox_7.setStyleSheet("color: black")
            self.groupBox_4.setStyleSheet("color: black")
            self.groupBox_5.setStyleSheet("color: red")
            print ('need2')
            self.label_3.setText("不具合種類を選択してください（複数選択、入力可能）")
            self.label_3.setStyleSheet('color: red')

        else:
            self.groupBox.setStyleSheet("color: black")
            self.groupBox_3.setStyleSheet("color: black")
            self.groupBox_7.setStyleSheet("color: black")
            self.groupBox_4.setStyleSheet("color: black")
            self.groupBox_5.setStyleSheet("color: black")
            print ("finished")
            self.saveData()

            

           


   

    def saveData(self):

        if not os.path.isdir(reportPath+folderName):
            os.mkdir(reportPath+folderName)
        
        if os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/idoAutoSave.ini") == True:
            shutil.copy("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/idoAutoSave.ini", reportPath+folderName)
        if os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/idoUser.ini") == True:
            shutil.copy("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/idoUser.ini", reportPath+folderName)
        if os.path.exists("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/idoAutoSaveViewer.ini") == True:
            shutil.copy("C:/Users/"+os.getlogin()+"/AppData/Local/ICIDO/IDOSystem/idoAutoSaveViewer.ini", reportPath+folderName)


        shutil.copy(sysLogPath, reportPath+folderName)
        shutil.copy(erLogPath, reportPath+folderName)

        print (reportPath+folderName)

        with open(reportPath+folderName+"/infoLog.log","w",encoding="utf-8") as f:
        

            errorDetail = self.textEdit_error_detail.toPlainText()
            workf1 = self.workFlow1.currentText()
            workf2= self.workFlow2.currentText()
            workf3 = self.workFlow3.currentText()
            workf4 = self.workFlow4.currentText()
            workf5 = self.workFlow5.currentText()
            version = self.comboBox_version.currentText()
            time = self.spinBox_time.value()
            critical = self.comboBox_critical.currentText()

            






            #crnt_time_write
            f.write("[Reported]       : "+t+"\n")
            
            if startTime != "":
                f.write("[IC.IDO Started] : "+startTime+"\n")
            f.write(mfTime+"\n")


#check box return
            #if self.checkBox_1_shutdown.checked()

            #get account
            if userName !="":
                f.write("[User name] : "+userName+"\n"+"\n")
            if machineName !="":
                f.write("[MachineName] : "+machineName+"\n"+"\n")



############# ic.ido version
            f.write("[IC.IDO Version]"+"\n"+version)
            if self.checkBox_beta.isChecked() == True:
                f.write(" Beta")

            f.write("\n"+"\n")


############# error sorts
            f.write("[Error Symptom]"+"\n")
            if self.checkBox_1_shutdown.isChecked() == True:
                f.write(self.checkBox_1_shutdown.text()+",  ")

            if self.checkBox_2_freeze.isChecked() == True:
                f.write(self.checkBox_2_freeze.text()+",  ")

            if self.checkBox_3_controller.isChecked() == True:
               f.write(self.checkBox_3_controller.text()+",  ")

            if self.checkBox_4_loading.isChecked() == True:
               f.write(self.checkBox_4_loading.text()+",  ")

            if self.checkBox_5_import.isChecked() == True:
                f.write(self.checkBox_5_import.text()+",  ")

            if self.checkBox_6_etc.isChecked() == True:
                f.write(self.checkBox_6_etc.text()+" : "+ self.comboBox_critical_2.currentText())

            f.write("\n"+"\n")

            if critical != "--":
                f.write("[Priority]\n"+critical+"\n\n")

            self.progressBar.setProperty("value", 27)
            print (crState)
            print (apState)



            #additional info for error
            if errorDetail !="":
                print (errorDetail)
                f.write("[Additional explanation]"+"\n"+errorDetail+"\n"+"\n")


###########
            self.progressBar.setProperty("value", 33)
            if self.radioButton_immersive.isChecked() == True:
                f.write("[Envrionment]"+"\n"+self.radioButton_immersive.text()+"\n"+"\n")

            if self.radioButton_desktop.isChecked() == True:
                f.write("[Envrionment]"+"\n"+self.radioButton_desktop.text()+"\n"+"\n")

            if self.radioBox_timing_1.isChecked() == True: 
                f.write("[When Error occured]"+"\n"+self.radioBox_timing_1.text()+"\n"+"\n")

            #if self.radioBox_timing_2.isChecked() == True:
             #   f.write("[Error occured while]"+"\n"+self.radioBox_timing_2.text()+"\n"+"\n")

            if self.radioBox_timing_3.isChecked() == True: 
                f.write("[Error occured while]"+"\n"+self.radioBox_timing_3.text()+"\n"+"\n")

            if self.radioBox_timing_4.isChecked() == True:
                f.write("[Error occured while]"+"\n"+self.radioBox_timing_4.text()+"\n"+"\n")

            if self.radioBox_timing_5_etc.isChecked() == True:
                f.write("[Error occured while]"+"\n"+self.radioBox_timing_5_etc.text()+"\n"+self.lineEdit_radioBox_timing_etc.text()+"\n"+"\n")

            

            f.write("[OS information]\n")
            f.write(osInfo)
            for i in windowsInfo:
                f.write(i+" ")

           # if has_admin() ==True:
               # f.write("\nAdministrator")

            #elif has_admin() ==False:
              #  f.write("\nNon-Administrator")

          



            #Cpu
            f.write("\n\n[Processor :"+str(getCpuInfo())+"]\n"+"\n")



            #get GC info
            self.progressBar.setProperty("value", 40)
            if len(gcName) !="":
                f.write("[Graphic processor : "+gcName+"\n")
            if len(gcVersion) !="":
                f.write("[Graphic driver : "+gcVersion+"\n")



            #get MEM info
            self.progressBar.setProperty("value", 48)
            f.write("[Total Physical Memory : "+str(getMemory())+"]\n")
            f.write("[Total Swap Memory     : "+str(getSwapMemory())+"]\n")
            f.write("\n")


#            f.write("[Total UsedSwap : "+str(UsedSwap)+"]\n")




            # output time input manual

            self.progressBar.setProperty("value", 55)
            if time != 0:
                f.write("[Used Time]"+"\n"+" About "+str(time)+" min"+"\n"+"\n")

            # work flow output from manual input
            f.write("[Workflow:user input]"+"\n"+"1. "+workf1+"\n"+"2. "+workf2+"\n"+"3. "+workf3+"\n"+"4. "+workf4+"\n"+"5. "+workf5+"\n"+"\n")


            #state created and applied
            f.write("[State Created %d times. and applied %d times."% (crState, apState)+"\n"+"\n")

            





            #f.write("[Last IC.IDO Used]"+"\n"+mfTime)


            #get Data info      
           

            

            


            
            self.progressBar.setProperty("value", 60)
            if len(seFiles) !=0:
                for i in range(0, len(seFiles)):
                    f.write("[Session file used]"+"\n")
                    f.write(" File name = "+seFiles[i]+"\n")
                    f.write(" File Size = "+convertSize(os.path.getsize(seFiles[i]))+"\n")
                    print (" File Size = "+convertSize(os.path.getsize(seFiles[i]))+"\n")
                    f.write(" Folder size = "+convertSize(get_size(sePaths[i]))+"\n"+"\n")

            
            self.progressBar.setProperty("value", 70)
            if len(opFiles) !=0:
                for i in range(0, len(opFiles)):
                    f.write("[Imported or Loaded]"+"\n")
                    f.write(" File name = "+opFiles[i]+"\n")
                    f.write(" File Size = "+convertSize(os.path.getsize(opFiles[i]))+"\n")
                    f.write(" Folder size = "+convertSize(get_size(opPaths[i]))+"\n"+"\n")

           
            self.progressBar.setProperty("value", 80)
            if len(cadFiles) !=0:
                for i in range(0, len(cadFiles)):
                    f.write("[cadFile]"+"\n")
                    f.write(" File name = "+cadFiles[i]+"\n")
                    f.write(" File Size = "+convertSize(os.path.getsize(cadFiles[i]))+"\n")
                    f.write(" Folder size = "+convertSize(get_size(cadPaths[i]))+"\n"+"\n")
            f.write("\n       ---------END---------")


            self.progressBar.setProperty("value", 100)
            
            
            
            self.label_3.setStyleSheet("color: blue")
            self.label_3.setText("下記フォルダに作成完了")
            self.label_4.setText(reportPath+folderName)
            self.exitBtn.show()
            self.exitBtn.raise_()

            print ("report finished")



            








        # Connect "add" button with a custom function (addInputTextToListbox)
    #   self.addBtn.clicked.connect(self.addInputTextToListbox)

            
        

 
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    dialog = QtWidgets.QDialog()
    
 
    prog = MainDialog(dialog)
 
    dialog.show()

    sys.exit(app.exec_())






